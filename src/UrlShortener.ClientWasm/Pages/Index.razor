@attribute [Route(Routes.HOME)]
@page "/h"
@inject ILinkHttpClient LinkClient
@inject IJSRuntime JsRuntime

<PageTitle>UrlShortener</PageTitle>

<div class="col-6">

    <h1 class="">Create short url address</h1>
    @if(_apiErrors!=null)
    {
        foreach (var item in _apiErrors.Errors ?? Enumerable.Empty<string>())
        {
            <span>@item</span>
        }
    }

    <div class="input-group input-group-lg mb-3">
        <input class="form-control" placeholder="Input url" autocomplete="off" autofocus @bind="UrlAddress" type="text" />
        <button class="btn btn-primary" @onclick="Send">Cut</button>
    </div>
    <span>Optional</span>
    <div class="input-group input-group-sm mb-3">
        <span class="input-group-text">Alias</span>
        <input type="text" placeholder="alias" class="form-control" autocomplete="off" @bind="Alias" />
    </div>
    <br />
    @if (_link != null)
    {
        <div>
            <div class="input-group input-group-lg" role="alert">
                <div class="alert alert-success form-control" role="alert">
                    <span>@_link.ShortUrl</span>
                </div>
                <button class="btn btn-outline-success" type="button" @onclick="Copy">Copy</button>
            </div>
        </div>
    }
</div>




<SurveyPrompt Title="How is Blazor working for you?" />


@code {
    private IEnumerable<string>? errors;

    public string? UrlAddress { get; set; }

    public string? Alias { get; set; }
    private ApiErrors? _apiErrors;

    private LinkResponse? _link;

    protected async override Task OnInitializedAsync()
    {
        await Task.CompletedTask;
    }

    private async Task Send()
    {
        Validate();
        if (string.IsNullOrEmpty(UrlAddress) == false)
        {
            CreateLinkDto content = new CreateLinkDto(UrlAddress, Alias);

            HttpResponseResult<LinkResponse> responseResult = await LinkClient.PostAsync<LinkResponse>("api/link", content);
            if (responseResult.Success)
                _link = responseResult.Value;
            else
                _apiErrors = responseResult.ApiErrors;
        }
    }

    private async Task Copy()
    {
        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", _link?.ShortUrl);
    }

    private void Validate()
    {
        UrlAddress = UrlAddress?.Trim();
        Alias = Alias?.Trim();
        Alias = Alias?.Length == 0 ? null : Alias;

    }
}
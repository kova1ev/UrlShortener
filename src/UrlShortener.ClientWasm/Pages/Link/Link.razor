@page "/link/{id:guid}"
@inject ILinkHttpService LinkHttpService
@inject NavigationManager NavigationManager

@attribute [Authorize]
<PageTitle>About</PageTitle>

@if (fail)
{
    <CustomNotFound></CustomNotFound>
}
else
{
    <div class="row">
        <h3>Link</h3>
        @if (_linkViewModel != null)
        {
            <p class="fw-bold">UrlAddress : <span class="fw-lighter">@_linkViewModel.UrlAddress</span> </p>
            <p class="fw-bold">UrlShort : <span class="fw-lighter">@_linkViewModel.UrlShort</span> </p>
            <p class="fw-bold">DateTimeCreated : <span class="fw-lighter">@_linkViewModel.DateTimeCreated</span> </p>
            <p class="fw-bold">DomainName : <span class="fw-lighter">@_linkViewModel.LinkStatistic.DomainName</span> </p>
            <p class="fw-bold">LastUse : <span class="fw-lighter">@_linkViewModel.LinkStatistic.LastUse</span> </p>
            <p class="fw-bold">Clicks : <span class="fw-lighter">@_linkViewModel.LinkStatistic.Clicks</span> </p>
            <p class="fw-bold">Browser : <span class="fw-lighter">@_linkViewModel.LinkStatistic.Browser</span> </p>
            <p class="fw-bold">Os : <span class="fw-lighter">@_linkViewModel.LinkStatistic.Os</span> </p>
            <h6>Geolocation</h6>
            <p class="fw-bold">Country : <span class="fw-lighter">@_linkViewModel.LinkStatistic.Country</span> </p>
            <p class="fw-bold">Region : <span class="fw-lighter">@_linkViewModel.LinkStatistic.Region</span> </p>
            <p class="fw-bold">City : <span class="fw-lighter">@_linkViewModel.LinkStatistic.City</span> </p>
            <div>
                <button class="btn btn-danger" @onclick="Delete">Delete</button>
                <button class="btn btn-warning" @onclick="NavToUpdate">Update</button>
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private bool fail;

    private LinkDetailsViewModel? _linkViewModel;

    protected async override Task OnInitializedAsync()
    {
        await GetLink();
    }

    private async Task GetLink()
    {

        HttpResponseResult<LinkDetailsViewModel> responseResult = await LinkHttpService.GetLinkByIdAsync(Id);
        if (responseResult.Status == ResultStatus.Success)
        {
            fail = default;
            _linkViewModel = responseResult.Value;
        }
        else
        {
            fail = true;
        }
    }


    private async Task Delete()
    {
        HttpResponseResult res = await LinkHttpService.DeleteLinkAsync(Id);
        if (res.Status == ResultStatus.EmptyResult)
            NavigationManager.NavigateTo("/links");
        else
            fail = true;

    }

    private void NavToUpdate()
    {
        NavigationManager.NavigateTo($"/link/update/{Id}");
    }
}

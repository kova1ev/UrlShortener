@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IWebAssemblyHostEnvironment IHostEnvironment

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">UrlShortener</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column ">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="links">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Links
            </NavLink>
        </div>
        @if (IHostEnvironment.IsDevelopment())
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/swagger/index.html">
                    <span class="oi oi-aperture" aria-hidden="true"></span> Swagger
                </NavLink>
            </div>
        }
    </nav>
    <div class="nav-item px-3">
        <NavLink class="nav-link text-warning" @onclick="LogOut" type="button">
            <span class="oi oi-account-logout" aria-hidden="true"></span> LogOut
        </NavLink>
    </div>
</div>


@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : string.Empty;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }


    private async Task LogOut()
    {
        await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).LogOut();
        NavigationManager.NavigateTo("/");
    }

}

@page "/admin/login"
@attribute [AllowAnonymous]

@inject IAuthenticationService AuthenticationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>
<div class="flex-column d-flex flex-wrap align-content-center">
    <h3 class="text-center">Login</h3>
    @foreach (var item in ValidationMessages)
    {
        <div class="alert alert-danger" role="alert">@item</div>
    }
    <EditForm Model="@LoginModel" class="col-md-6" OnValidSubmit="SignIn">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <!-- Email input -->
        <div class="form-outline mb-4">
            <ValidationMessage For="()=>LoginModel.Email"> </ValidationMessage>
            <InputText type="email" id="form1Example1" class="form-control" @bind-Value="@LoginModel.Email" />
            <label class="form-label" for="form1Example1">Email address</label>
        </div>

        <!-- Password input -->
        <div class="form-outline mb-4">
            <ValidationMessage For="()=>LoginModel.Password"> </ValidationMessage>
            <InputText type="password" id="form1Example2" class="form-control" @bind-Value="@LoginModel.Password" />
            <label class="form-label" for="form1Example2">Password</label>
        </div>

        <!-- 2 column grid layout for inline styling -->
        <div class="row mb-4">
            <div class="col d-flex justify-content-center">
                <!-- Checkbox -->
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" value="" id="form1Example3" checked />
                    <label class="form-check-label" for="form1Example3"> Remember me </label>
                </div>
            </div>

            <div class="col">
                <!-- Simple link -->
                <a href="#">Forgot password?</a>
            </div>
        </div>

        <!-- Submit button -->
        <button type="submit" class="btn btn-primary btn-block">Sign in</button>
    </EditForm>
</div>



@code {

    public string? ReturnUrl { get; set; }
    private LoginModel LoginModel = new();

    private IEnumerable<string> ValidationMessages { get; set; } = Enumerable.Empty<string>();

    protected override Task OnInitializedAsync()
    {
        ReturnUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        return base.OnInitializedAsync();
    }

    public async Task SignIn()
    {
        HttpResponseResult<JwtToken> result = await AuthenticationService.GetToken(LoginModel);
        if (result.Status == ResultStatus.Success)
        {
            ValidationMessages = Enumerable.Empty<string>();

            // отправить  токен в ауф провайдер
            var authenticationStateProviderService = (CustomAuthenticationStateProvider)AuthenticationStateProvider;

            authenticationStateProviderService.UpdateAuthenticationState(result.Value);


            if (string.IsNullOrWhiteSpace(ReturnUrl) == false && ReturnUrl.Equals("admin/login") == false)
                NavigationManager.NavigateTo(ReturnUrl);
            else
                NavigationManager.NavigateTo("/admin");

        }
        else
        {
            ValidationMessages = result.ApiErrors.Errors;
        }


    }
}

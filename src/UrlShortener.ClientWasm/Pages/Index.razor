@page "/"
@using System.ComponentModel.DataAnnotations;
@inject ILinkHttpService LinkHttpService
@inject IJSRuntime JsRuntime

<PageTitle>UrlShortener</PageTitle>
@if (fail )
{
    <ServerError></ServerError>
}
else
{
    <div class="flex-column d-flex flex-wrap align-content-center">

        <h1 class="text-center">Just shorten your link!</h1>
        @foreach (var item in _apiErrors?.Errors ?? Enumerable.Empty<string>())
        {
            <div class="alert alert-danger" role="alert">@item</div>
        }
        @if (_link != null)
        {
            <div class="d-flex justify-content-between col-lg-6">
                <div id="short__link" class="alert alert-success col-lg" role="alert">
                    <span>@_link.ShortUrl</span>                    
                </div>
                <button class="btn btn-outline-success ms-2 " type="button" @onclick="Copy">Copy</button>
            </div>
        }

        <EditForm class="col-lg-6 my-4" Model="_createLinkDto" OnSubmit="@CreateLink">
            <div class="input-group input-group-lg mb-3">
                <input class="form-control" placeholder="input url" autocomplete="off" autofocus @bind="_createLinkDto.UrlAddress"
                       type="text" />
                <button class="btn btn-primary" type="submit">Cut</button>
            </div>
            <span class="oi oi-cog" aria-hidden="true"></span>
            <span>Optional</span>
            <div class="input-group input-group-sm mb-3">
                <span class="input-group-text bg-warning">Alias</span>
                <input type="text" placeholder="input alias" class="form-control" autocomplete="off" @bind="_createLinkDto.Alias" />
            </div>
        </EditForm>
        <br />

    </div>
}



@code {
    private CreateLinkModel _createLinkDto = new();
    private ApiErrors? _apiErrors;
    private LinkResponse? _link;
    private bool fail ;

    protected async override Task OnInitializedAsync()
    {
        await Task.CompletedTask;
    }

    private async Task CreateLink()
    {
        if (ValidateCreateLinkDto())
        {
            HttpResponseResult<LinkResponse> responseResult = await LinkHttpService.CreateLinkAsync(_createLinkDto);
            if (responseResult.Status == ResultStatus.Success)
            {
                _link = responseResult.Value;
                _apiErrors = null;
            }
            else
            {
                if (responseResult.StatusCode == System.Net.HttpStatusCode.InternalServerError)
                {
                    fail = true;
                }
                _link = null;
                _apiErrors = responseResult.ApiErrors;
            }
            StateHasChanged();
        }
    }

    private async Task Copy()
    {
        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", _link?.ShortUrl);
    }

    private bool ValidateCreateLinkDto()
    {
        // ?
        var results = new List<ValidationResult>();
        var context = new ValidationContext(_createLinkDto);
        return Validator.TryValidateObject(_createLinkDto, context, results, true);
    }
}
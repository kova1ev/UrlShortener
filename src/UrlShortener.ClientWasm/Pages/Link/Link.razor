@page "/link/{id:guid}"
@inject ILinkHttpService LinkHttpService
@inject NavigationManager NavigationManager

<PageTitle>About</PageTitle>

@if (fail)
{
    <CustomNotFound></CustomNotFound>
}
else
{
    <h3>Link</h3>
    @if (_linkDto != null)
    {
        <p>UrlAddress</p>
        <h4>@_linkDto.UrlAddress</h4>
        <br />
        <p>UrlShort</p>
        <h4>@_linkDto.UrlShort</h4>
        <br />
        <p>DateTimeCreated</p>
        <h4>@_linkDto.DateTimeCreated</h4>
        <br />
        <p>DomainName</p>
        <h4>@_linkDto.LinkInfo.DomainName</h4>
        <br />
        <p>LastUse</p>
        <h4>@_linkDto.LinkInfo.LastUse</h4>
        <br />
        <div>
            <button class="btn btn-danger" @onclick="Delete">Delete</button>
            <button class="btn btn-warning" @onclick="NavToUpdate">Update</button>
        </div>
    }
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private bool fail;

    private LinkDto? _linkDto;

    protected async override Task OnInitializedAsync()
    {
        Console.WriteLine(Id);

        await GetLink();
    }

    private async Task GetLink()
    {

        HttpResponseResult<LinkDto> responseResult = await LinkHttpService.GetLinkByIdAsync(Id);
        if (responseResult.Status == ResultStatus.Success)
        {
            fail = default;
            _linkDto = responseResult.Value;
        }
        else
        {
            fail = true;
        }
    }


    private async Task Delete()
    {
        HttpResponseResult res = await LinkHttpService.DeleteLinkAsync(Id);
        if (res.Status == ResultStatus.Success)
            NavigationManager.NavigateTo("/links");
        else
            fail = true;

    }

    private void NavToUpdate()
    {
        NavigationManager.NavigateTo($"/link/update/{Id}");
    }
}
